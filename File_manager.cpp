#include <iostream>
#include <filesystem>
#include <Windows.h>
#include <vector>
#include "HardDisk.h"

struct Hard //описание имени и типа диска
{
    string name;
    string type;
};

using namespace std;
namespace fs = std::filesystem;

int main(int argс, char* argv[]) // включим аргументы командной строки для принятия пути каталога, из которого начнет работать программа
{
	fs::path p = fs::current_path();
	if (argс > 1) // если передан аргумент - присваиваем его родительскому пути
	{
		p = fs::path(*argv);
	}
    p = "C:\\1\\";
	system("chcp 1251 > 0");
    int opt{ -1 }; //
    HardDisk H; // 
    while (opt != 0)
    {
        //system("cls");
        cout << "Вы находитесь:\n" << p.root_name() <<"\n";
        cout << "\n" <<
        "1 - Смена текущего каталога (путь к текущему каталогу должен всегда отображаться на экране)\n"
            "2 - Отображение подключенных жетских дисков\n"
            "3 - Отображение содержания текущего каталога\n"
            "4 - Создание нового каталога в текущем каталоге\n"
            "5 - Удаление уже существующего каталога(если каталог не пустой – то необходимо удалить все его содержимое, для этого Вам необходимо использовать рекурсию)\n"
            "6 - Создание нового файла в текущем каталоге\n"
            "7 - Удаление файла из текущего каталога\n"
            "8 - Переименование файла в текущем каталоге\n"
            "9 - Перемещение файла из текущего каталога в указанный пользователем каталог\n"
            "10 - Вывод содержимого указанного пользователем файла из текущего каталога на экран\n"
            "0 - Выход\n";
        std::cin >> opt; // ввод выбора меню
        switch (opt)
        {
        case 2:
                
            cout << "HardDisk:";
            for (auto p : H.lst)
            {
                cout << p.name;
                cout << " - " << p.type;
                cout << "\n";
            }
            break;
        case 3:

            for (auto c : fs::directory_iterator(p))
            {
                cout << "\n";
                cout << c;
            }
            cout << "\n-------------------------------------\n";
            system("pause");
            break;
        default:
            break;
        }
    }
   
   
	cout << "\n" << p.root_path();
}